# -*- coding: utf-8 -*-
"""NeuralNetworkTraining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1banht6P5KRs7uac1edIW0uQVmjty_yPp
"""

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

import numpy as np
import pandas as pd
import h5py
import keras
import tensorflow as tf
from matplotlib import pyplot as plt
from keras.models import Sequential, Model
from keras.layers import Dense,Dropout,Flatten
from keras.layers.convolutional import Conv1D,Conv2D,MaxPooling2D
from keras import backend as K
from keras.callbacks import ModelCheckpoint
from sklearn.utils import shuffle
from keras.models import load_model
from google.colab import files
uploaded = files.upload()

# Eğitim ve test verileri yüklendi.
x_data=np.loadtxt("imagedata.csv",delimiter=",")
y_data=np.loadtxt("angledata.csv",delimiter=",")

plt.hist(y_data,bins=18)

x_data, y_data = shuffle(x_data, y_data, random_state=1000)

x_train=x_data[:14000]
y_train=y_data[:14000]

x_test=x_data[14000:]
y_test=y_data[14000:]

# Parametreler belirlendi.
num_classes=5
img_rows, img_cols = 120, 120
batch_size=128
epochs=8

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()

# 3x3 boyutunda 32 adet filtreden oluşan ReLU aktivasyonlu CONV katmanı eklendi. 
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))

# 2x2 boyutlu çerçeveden oluşan Maxpool katmanı eklendi.
model.add(MaxPooling2D(pool_size=(2, 2)))

# Dropout işlemi
model.add(Dropout(0.25))

# Tam bağlantılı katmanına geçiş için düzleştirme yapıldı.
model.add(Flatten())

# 120 nörondan oluşan ReLU aktivasyonlu gizli katman eklendi.
model.add(Dense(120, activation='relu'))

# Dropout işlemi
model.add(Dropout(0.5))

# Çıkış katmanına sınıf sayısı kadar Softmax aktivasyonlu nöron eklendi.
model.add(Dense(num_classes, activation='softmax'))

model.summary()

# Loss fonksiyonu ve optimizasyon algoritmasını belirleme.
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

# Model eğitimi
hist=model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))

# Başarı oranını ekrana yazdırma
scores = model.evaluate(x_train, y_train)
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))

# Grafik olarak çizdirme
plt.figure(figsize=(14,3))
plt.subplot(1, 2, 1)
plt.suptitle('Eğitim', fontsize=10)
plt.ylabel('Loss', fontsize=16)
plt.plot(hist.history['loss'], color='b', label='Training Loss')
plt.plot(hist.history['val_loss'], color='r', label='Validation Loss')
plt.legend(loc='upper right')

plt.subplot(1, 2, 2)
plt.ylabel('Accuracy', fontsize=16)
plt.plot(hist.history['acc'], color='b', label='Training Accuracy')
plt.plot(hist.history['val_acc'], color='r', label='Validation Accuracy')
plt.legend(loc='lower right')
plt.show()

# Eğtilen modeli h5pyy dosyası olarak kaydetme
model.save('drive/Colab/NeuralNetworkTraining/model.h5')

model_test=load_model('drive/Colab/NeuralNetworkTraining/model.h5')

i=500
test_image = x_test[i]
y_test[i]

plt.imshow(test_image.reshape(120,120),cmap='gray')
plt.axis('off')

test_data=x_test[i].reshape(1,120,120,1)

pred=model.predict(test_data)
probs=model.predict_proba(test_data)

print(pred,probs)